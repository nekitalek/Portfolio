type: edu
files:
- name: src/index.html
  visible: true
  text: |-
    <!DOCTYPE html>
    <html lang="en">
    <head>
        <meta charset="utf-8">
        <title>Hello, World!</title>
    </head>
    <body>

    </body>
    </html>
  learner_created: false
- name: test/test.js
  visible: false
  text: |
    const puppeteer = require('puppeteer');
    const path = require('path');
    // '..' since we're in the hstest/ subdirectory; learner is supposed to have src/index.html
    const pagePath = 'file://' + path.resolve(__dirname, '../src/index.html');

    const hs = require('hs-test-web');

    const sleep = (ms) => new Promise(res => setTimeout(res, ms));

    async function stageTest() {
        const browser = await puppeteer.launch({
            headless: false,
            defaultViewport: null,
            args:['--start-maximized']
        });

        const page = await browser.newPage();
        await page.goto(pagePath);

        page.on('console', msg => console.log(msg.text()));

        let selector = 'button[class="open-window"]';
        page.evaluate((selector) => document.querySelector(selector).click(), selector);

        await sleep(1000);

        let result = await hs.testPage(page,
            // Test #1 - check if the document has the header
            () => {
                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                return hs.correct();
            },

            // Test #2 - check if the document has at least one <nav> element
            () => {
                let nav = document.getElementsByTagName('nav');

                if (nav === null || nav.length === 0) {
                    return hs.wrong('Cannot find the nav element on your web page.');
                }

                return hs.correct();
            },

            // Test #3 - check if the document has the <h1> element
            () => {
                let headings1 = document.getElementsByTagName('h1');

                if (headings1 === null || headings1.length === 0) {
                    return hs.wrong('Cannot find h1 element on your web page.');
                }

                let header = headings1[0]
                let title = header.textContent || header.innerText;

                if (!title || title.length === 0) {
                    return hs.wrong('Cannot find a text within h1 element');
                }

                return hs.correct();
            },

            // Test #4 - check if the document has the <h1> element
            () => {
                let html = document.getElementsByTagName('html')[0];

                let margin = window.getComputedStyle(html).margin;
                if (margin !== '0px') {
                    return hs.wrong('It seems that you have not reset the default margin property');
                }

                let padding = window.getComputedStyle(html).padding;
                if (padding !== '0px') {
                    return hs.wrong('It seems that you have not reset the default padding property');
                }

                return hs.correct();
            },

            // Test #5 - check if the document has the <footer> element
            () => {
                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (footers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                return hs.correct();
            },

            // Test #6 - check if the document has at least three section elements
            () => {
                let sections = document.getElementsByTagName('section');

                if (sections === null || sections.length < 3) {
                    return hs.wrong(`Cannot find tree sections elements. There are only ${sections.length}.`);
                }

                return hs.correct();
            },

            // Test #7 - check the "about me" section
            () => {
                let sections = document.getElementById('about');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "about" id.');
                }

                return hs.correct();
            },

            // Test #8 - check the "portfolio" section
            () => {
                let sections = document.getElementById('portfolio');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "portfolio" id.');
                }

                return hs.correct();
            },

            // Test #9 - check the "contacts" section
            () => {
                let sections = document.getElementById('contacts');

                if (sections === null || sections.length < 1) {
                    return hs.wrong('Cannot find a section with the "contacts" id.');
                }

                return hs.correct();
            },

            // Test #10 - check header and footer background colors
            () => {
                function getRealColor(elem) {
                    try {
                        while (elem) {
                            let color = window.getComputedStyle(elem).backgroundColor;
                            if (color !== "rgba(0, 0, 0, 0)") {
                                let match = color.match(/^rgba?\((\d+), (\d+), (\d+)(, [\d.]+)?\)$/i);
                                return {
                                    red: Number(match[1]),
                                    green: Number(match[2]),
                                    blue: Number(match[3]),
                                    hex: Number(match[1]) * 65536 + Number(match[2]) * 256 + Number(match[3])
                                };
                            }
                            elem = elem.parentElement;
                        }
                    } catch (e) {
                        return null;
                    }
                    return null;
                }

                let headers = document.getElementsByTagName('header');

                if (headers === null || headers.length === 0) {
                    return hs.wrong('Cannot find the header in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one header in the document.');
                }

                let hasBackgroundImage = getComputedStyle(headers[0]).background.includes('url');

                let headerBack = getRealColor(headers[0]);
                let noCustomHeaderColor = headerBack === null || headerBack.hex === 0xFFFFFF;
                if (noCustomHeaderColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like header's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                let footers = document.getElementsByTagName('footer');

                if (footers === null || footers.length === 0) {
                    return hs.wrong('Cannot find the footer in the document.');
                } else if (headers.length > 1) {
                    return hs.wrong('Found more than one footer in the document.');
                }

                hasBackgroundImage = getComputedStyle(footers[0]).background.includes('url');

                let footerBack = getRealColor(footers[0]);
                let noCustomFooterColor = footerBack === null || footerBack.hex === 0xFFFFFF;
                if (noCustomFooterColor && !hasBackgroundImage) {
                    return hs.wrong("Looks like footer's background color is not set. " +
                        "It should be an image or some non-white color.")
                }

                return hs.correct()
            },

            // Test #11 - check click button and show popup window
            () => {
                let buttons = document.getElementsByClassName('open-window');

                if (buttons === null || buttons.length === 0) {
                    return hs.wrong('Cannot find a button with the class "open-window" to open the pop-up window.');
                }

                let forms = document.getElementsByClassName('window');

                if (forms === null || forms.length === 0) {
                    return hs.wrong('Cannot find the element with the class "window".');
                }

                return hs.correct()
            }
        );

        await browser.close();
        return result;
    }


    jest.setTimeout(30000);
    test("Test stage", async () => {
            let result = await stageTest();
            if (result['type'] === 'wrong') {
                fail(result['message']);
            }
        }
    );
  learner_created: false
- name: src/style.css
  visible: true
  text: |-
    @import url('https://fonts.googleapis.com/css2?family=Lexend+Peta:wght@200;400;800&family=Montserrat:ital,wght@1,300;1,900&display=swap');
    html{
        scroll-behavior: smooth;
    }

    nav{
        background-color: #2d2d2d;
        margin-left: -10px;
        margin-right: -10px;
        margin-top: -10px;
        height: 75px;
        display: flex;
        justify-content: end;
    }
    .catalog{
        text-decoration: none;
        color: #838383;
        margin: 25px 25px;
        font-variation-settings: "wght" 300;
        font-family: 'Montserrat', sans-serif;
        transition: all 0.5s ease;
    }
    .catalog:hover{
        color: #d7d7d7;
    }
    .head1{
        text-align: center;
        font-variation-settings: "wght" 900;
        font-family: 'Lexend Peta', sans-serif;
        position: absolute;
        bottom: 30%;
        margin-left: 15px;
        color: #000000;
        text-shadow: -1px -1px 0 #ffffff, 1px -1px 0 #ffffff, -1px 1px 0 #ffffff, 1px 1px 0 #ffffff;
    }
    .head2{
        text-align: center;
        font-variation-settings: "wght" 900;
        font-family: 'Lexend Peta', sans-serif;
        position: absolute;
        bottom: 25%;
        margin-left: 15px;
        color: #000000;
        text-shadow: -1px -1px 0 #838383, 1px -1px 0 #838383, -1px 1px 0 #838383, 1px 1px 0 #838383;
    }
    header{
        background-image: url("https://www.worldforestry.org/wp-content/uploads/2020/02/dan-otis-OYFHT4X5isg-unsplash-scaled.jpg");
        height: 900px;
        width: auto;
        margin-right: -10px;
        margin-left: -10px;
    }
    #about-header{
        text-align: center;
        font-size: 40px;
        height: max-content;
        font-variation-settings: "wght" 900;
        font-family: 'Lexend Peta', sans-serif;
    }
    #about{
        background-color: #2d2d2d;
        height: 750px;
        margin-right: -10px;
        margin-left: -10px;
        margin-top: -35px;
    }
    .about-me-content{
        font-variation-settings: "wght" 400;
        font-family: 'Lexend Peta', sans-serif;
        text-align: center;
        margin-left: 800px;
        margin-top: 250px;
    }
    .ph{
        position: absolute;
        margin-left: 15px;
    }
    .ph2{
        z-index: 1;
        margin: 90px;
    }
    #portfolio{
        background: linear-gradient(#2d2d2d, #ffffff);
        height: 600px;
        padding-top: 10px;
        margin-top: -20px;
        margin-left: -10px;
        margin-right: -10px;
    }
    #portfolio-content{
        text-align: center;
        font-size: 40px;
        height: max-content;
        font-variation-settings: "wght" 900;
        font-family: 'Lexend Peta', sans-serif;
    }
    #contacts{
        text-align: center;
        padding: 10px;
    }
    .contact{
        font-variation-settings: "wght" 200;
        font-family: 'Lexend Peta', sans-serif;
        padding: 0;
        margin-bottom: 0;
    }
    .logos{
        width: 30px;
        height: 30px;
        padding: 0 5px;
    }
    footer{
        padding: 10px 10px;
        margin-left: -1%;
        margin-right: -1%;
        margin-bottom: -10%;
        background-color: #2d2d2d;
        color: #838383;
        text-align: right;
    }
    #footer1{
        font-family: 'Montserrat', sans-serif;
        padding-bottom: 0;
        margin-bottom: 5px;
        margin-right: 10px;
    }
    #footer2{
        font-family: 'Montserrat', sans-serif;
        padding: 0;
        margin-top: 5px;
        margin-right: 10px;
    }
  learner_created: true
feedback_link: https://hyperskill.org/learn/step/11310#comment
status: Solved
feedback:
  message: Congratulations!
  time: Tue, 29 Mar 2022 16:28:21 UTC
record: 4
